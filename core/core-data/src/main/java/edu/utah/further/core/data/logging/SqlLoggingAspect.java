/**
 * Copyright (C) [2013] [The FURTHeR Project]
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package edu.utah.further.core.data.logging;

import static org.slf4j.LoggerFactory.getLogger;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.slf4j.Logger;

import edu.utah.further.core.api.text.StringUtil;

/**
 * An aspect that logs Hibernate-generated physical SQL queries and their parameters to
 * the virtual repository per FUR-1567.
 * <p>
 * -----------------------------------------------------------------------------------<br>
 * (c) 2008-2010 FURTHeR Project, Health Sciences IT, University of Utah<br>
 * Contact: {@code <further@utah.edu>}<br>
 * Biomedical Informatics, 26 South 2000 East<br>
 * Room 5775 HSEB, Salt Lake City, UT 84112<br>
 * Day Phone: 1-801-581-4080<br>
 * -----------------------------------------------------------------------------------
 *
 * @author Oren E. Livne {@code <oren.livne@utah.edu>}
 * @version May 16, 2011
 */
@Aspect
// Non-final for proxy subclassing
public class SqlLoggingAspect
{
	// ========================= CONSTANTS =================================

	/**
	 * A logger that helps identify this class' printouts.
	 */
	private static final Logger log = getLogger(SqlLoggingAspect.class);

	// ========================= FIELDS ==================================

	// Can't be used because connection pools will generate lots of different Connection
	// instances, and we would be keeping references to them, with a growing number of
	// over time.

	// /**
	// * A cache of native-to-logging-connection mappings.
	// */
	// private Map<Connection, Connection> decoratorMap =
	// CollectionUtil.newConcurrentMap();

	// /**
	// * A cache of connections that are not decorated.
	// */
	// private Set<Connection> notDecorated = CollectionUtil.newSet();

	/**
	 * Contains logging options that customize logging statements generated by this class.
	 */
	private LoggingOptions options;

	// ========================= POINTCUTS =================================

	/**
	 *
	 */
	@Pointcut("execution(* javax.sql.DataSource.getConnection(..))")
	private void getConnectionMethod()
	{
	}

	// ========================= ADVICES =================================

	/**
	 * Advise a processor's <code>process()</code> method.
	 *
	 * @param pjp
	 *            join point information (required for an around advice such as this one)
	 * @param chainRequest
	 *            chain request argument of the <code>process()</code> method
	 * @param requestProcessor
	 *            the advised request processor instance
	 * @return advised processor's <code>process()</code> method return type
	 */
	@Around("getConnectionMethod()")
	public Object decorateConnection(final ProceedingJoinPoint pjp) throws Throwable
	{
		try
		{
			final Connection rawConnection = (Connection) pjp.proceed();

			// =============================================
			// No cache used
			// =============================================
			if (isDecorated(rawConnection))
			{
				if (log.isDebugEnabled())
				{
					log.debug("Decorating connection to "
							+ rawConnection.getMetaData().getURL());
				}
				return new LoggingConnection(rawConnection, options);
			}
			if (log.isDebugEnabled())
			{
				log.debug("Ignoring connection to "
						+ rawConnection.getMetaData().getURL());
			}
			return rawConnection;

			// =============================================
			// Cache-enabled implementation
			// =============================================
			// // Search in caches first
			// Connection loggingConnection = decoratorMap.get(rawConnection);
			// if (loggingConnection != null)
			// {
			// return loggingConnection;
			// }
			// else if (notDecorated.contains(rawConnection))
			// {
			// // This connection is not to be decorated
			// return rawConnection;
			// }
			// else
			// {
			// // Not in either cache
			// if (isDecorated(rawConnection))
			// {
			// if (log.isInfoEnabled())
			// {
			// log.info("Decorating connection to "
			// + rawConnection.getMetaData().getURL());
			// }
			// // Add to decorated cache
			// loggingConnection = new LoggingConnection(rawConnection, options);
			// decoratorMap.put(rawConnection, loggingConnection);
			// return loggingConnection;
			// }
			// else
			// {
			// // Add to non-decorated cache
			// if (log.isInfoEnabled())
			// {
			// log.info("Ignoring connection to "
			// + rawConnection.getMetaData().getURL());
			// }
			// notDecorated.add(rawConnection);
			// return rawConnection;
			// }
			// }
		}
		catch (final Throwable t)
		{
			throw t;
		}
	}

	// ========================= GET/SET ===============================

	/**
	 * Set a new value for the options property.
	 *
	 * @param options
	 *            the options to set
	 */
	public void setOptions(final LoggingOptions options)
	{
		this.options = options;
	}

	// ========================= PRIVATE METHODS =======================

	/**
	 * Decide if to decorate a connection object. A hook.
	 *
	 * @param connection
	 *            raw JDBC connection
	 * @return <code>true</code> if and only if the connection will be decorated by this
	 *         class
	 */
	protected boolean isDecorated(final Connection connection)
	{
		// Check if connection URL matches options list
		try
		{
			final List<String> urls = options.getConnectionUrls();
			if (urls.isEmpty())
			{
				// No connection URLs specified, ignore this option
				return true;
			}
			return StringUtil.equalsAny(connection.getMetaData().getURL(), urls);
		}
		catch (final SQLException e)
		{
			// Any failure accessing connection properties ==> don't decorate since we're
			// not sure
			return false;
		}
	}
}
