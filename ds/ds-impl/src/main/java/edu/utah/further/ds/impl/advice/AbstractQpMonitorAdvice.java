/**
 * Copyright (C) [2013] [The FURTHeR Project]
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package edu.utah.further.ds.impl.advice;

import static edu.utah.further.core.api.constant.Strings.PROPERTY_SCOPE_STRING;
import static edu.utah.further.ds.api.util.AttributeName.META_DATA;
import static edu.utah.further.ds.api.util.AttributeName.QUERY_CONTEXT;

import java.util.Properties;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import edu.utah.further.core.api.chain.ChainRequest;
import edu.utah.further.core.api.chain.RequestProcessor;
import edu.utah.further.core.api.text.StringUtil;
import edu.utah.further.ds.api.advice.RequestProcessorAroundAdvice;
import edu.utah.further.ds.api.service.query.processor.StatusReporter;
import edu.utah.further.ds.api.util.StatusMetaDataUtil;
import edu.utah.further.ds.api.util.StatusType;
import edu.utah.further.fqe.ds.api.domain.DsMetaData;
import edu.utah.further.fqe.ds.api.domain.QueryContext;

/**
 * A convenient base class for monitor advices.
 * <p>
 * -----------------------------------------------------------------------------------<br>
 * (c) 2008-2013 FURTHeR Project, Health Sciences IT, University of Utah<br>
 * Contact: {@code <further@utah.edu>}<br>
 * Biomedical Informatics, 26 South 2000 East<br>
 * Room 5775 HSEB, Salt Lake City, UT 84112<br>
 * Day Phone: 1-801-581-4080<br>
 * -----------------------------------------------------------------------------------
 *
 * @author Oren E. Livne {@code <oren.livne@utah.edu>}</code>
 * @version Jun 6, 2010
 */
abstract class AbstractQpMonitorAdvice implements RequestProcessorAroundAdvice
{
	// ========================= CONSTANTS =================================

	/**
	 * A logger that helps identify this class' printouts.
	 */
	private static final Logger log = LoggerFactory
			.getLogger(AbstractQpMonitorAdvice.class);

	// ========================= FIELDS ====================================

	/**
	 * Normal query status processor to be injected.
	 */
	// @Autowired
	// @Qualifier("normal")
	@Resource(name = "statusReporter")
	protected StatusReporter statusReporter;

	/**
	 * Contains data source properties.
	 */
	@Autowired
	@Qualifier("dsProperties")
	private Properties dsProperties;

	// ========================= GETTERS & SETTERS =========================

	// ========================= PRIVATE METHODS ===========================

	/**
	 * Add status message to the current query context, if it is available.
	 *
	 * @param request
	 *            data source processing chain request
	 * @param requestProcessor
	 *            current request processor in the chain
	 * @param statusType
	 *            type of status to inject. We do NOT rely on the query context's status
	 *            here because we might want to override it in the message generated by
	 *            the advice in case of life cycle failure
	 * @param durationMillis
	 *            duration of the process described by this status, in milliseconds
	 * @return current request handler in the chain after injection
	 */
	protected final void setCurrentStatus(final ChainRequest request,
			final RequestProcessor requestProcessor, final StatusType statusType,
			final long durationMillis)
	{
		// This relies on some request attribute values that are known to be
		// available during the data query life cycle.
		final QueryContext queryContext = request.getAttribute(QUERY_CONTEXT);
		final DsMetaData dsMetaData = request.getAttribute(META_DATA);
		if (log.isDebugEnabled())
		{
			log.debug(dsMetaData.getName() + ": setting current status " + queryContext
					+ " " + requestProcessor.getName() + " " + statusType);
		}

		// Add a status message to the QueryContext
		if ((queryContext != null) && (dsMetaData != null))
		{
			StatusMetaDataUtil.setCurrentStatus(queryContext, dsMetaData,
					getProcessorName(requestProcessor), statusType, durationMillis);
		}
		else
		{
			if (log.isWarnEnabled())
			{
				log.warn("Cannot set current status from "
						+ getProcessorName(requestProcessor)
						+ " on the query context because it is null");
			}
		}
	}

	/**
	 * Return a request processor's name. Search first in the data source properties. If
	 * not found, use a default name.
	 *
	 * @param requestProcessor
	 *            processor
	 * @return formatted processor name
	 */
	protected final String getProcessorName(final RequestProcessor requestProcessor)
	{
		// Search in DS properties
		final String nameFromProperties = dsProperties.getProperty(requestProcessor
				.getName());
		if (StringUtils.isNotBlank(nameFromProperties))
		{
			return nameFromProperties;
		}

		// Fall-back value
		return StringUtil.lastPartOf(requestProcessor.getName(), PROPERTY_SCOPE_STRING);
	}

	/**
	 * @param chainRequest
	 * @param requestProcessor
	 */
	protected final void printPreProcessorReport(final ChainRequest chainRequest,
			final RequestProcessor requestProcessor)
	{
		if (log.isTraceEnabled())
		{
			log.trace("RequestProcessor: " + requestProcessor);
			log.trace("RequestHandler: " + requestProcessor.getRequestHandler());
			log.trace("Advising Before");
			log.trace("ChainRequest: " + chainRequest);
			log.trace("queryStatus: " + statusReporter + "@" + statusReporter.hashCode());
		}
	}
}
