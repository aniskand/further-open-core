<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (C) [2013] [The FURTHeR Project]

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:core="http://further.utah.edu/schema/core"
	xsi:schemaLocation="
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://further.utah.edu/schema/core
	http://further.utah.edu/schema/core/core.xsd
    ">

	<!-- =========================================== -->
	<!-- Data Layer -->
	<!-- =========================================== -->

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${datasource.driver}" />
		<property name="jdbcUrl" value="${datasource.url}" />
		<property name="testConnectionOnCheckin" value="${c3p0.testConnectionOnCheckin}" />
		<property name="preferredTestQuery" value="${c3p0.preferredTestQuery}" />
		<property name="maxIdleTime" value="${c3p0.maxIdleTime}" />
		<property name="idleConnectionTestPeriod" value="${c3p0.idleConnectionTestPeriod}" />
		<property name="properties">
			<props>
				<prop key="c3p0.initialPoolSize">${c3p0.initialPoolSize}</prop>
				<prop key="c3p0.minPoolSize">${c3p0.minPoolSize}</prop>
				<prop key="c3p0.maxPoolSize">${c3p0.maxPoolSize}</prop>
				<prop key="c3p0.maxStatements">${c3p0.maxStatements}</prop>
				<prop key="c3p0.acquireRetryAttempts">${c3p0.acquireRetryAttempts}</prop>
				<prop key="c3p0.acquireIncrement">${c3p0.acquireIncrement}</prop>
				<prop key="user">${datasource.user}</prop>
				<prop key="password">${datasource.password}</prop>
			</props>
		</property>
	</bean>

	<!-- Session factory abstract for setting up all the base properties, use 
		parent=sessionFactoryAbstract and add NamingStrategy property -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />

		<!-- Hibernate configuration properties (read from a properties file) -->
		<property name="hibernateProperties">
			<bean
				class="org.springframework.beans.factory.config.PropertiesFactoryBean">
				<property name="locations">
					<list>
						<!-- hibernate.config.file, datasource.config.file should be defined 
							somewhere in the spring.properties layers -->
						<value><![CDATA[classpath:hibernate-${hibernate.integration.config}.properties]]></value>
						<value><![CDATA[classpath:datasource-${datasource.integration.config}.properties]]></value>
					</list>
				</property>
			</bean>
		</property>

		<!-- Using improved naming strategy -->
		<property name="namingStrategy">
			<bean class="org.hibernate.cfg.ImprovedNamingStrategy" />
		</property>

		<!-- Reads package-level Hibernate annotations. Unfortunately, this has 
			to be manually maintained for all model packages -->
		<property name="annotatedPackages">
			<list>
				<value>edu.utah.further.fqe.model.impl</value>
				<value>edu.utah.further.ds.data.domain</value>
				<value>edu.utah.further.fqe.impl.domain></value>
			</list>
		</property>
		<!-- Mapping annotated classes using search patterns -->
		<property name="annotatedClasses">
			<bean class="edu.utah.further.core.util.io.ResourceMatchingFactoryBean">

				<!-- Use Apache Ant Pattern -->
				<property name="searchPatterns">
					<set>
						<value><![CDATA[classpath*:edu/utah/further/fqe/model/impl/**/*.class]]></value>
						<value><![CDATA[classpath*:edu/utah/further/ds/data/**/*.class]]></value>
						<value><![CDATA[classpath*:edu/utah/further/fqe/impl/**/*.class]]></value>
						<!-- Example of including jar resources -->
						<!-- <value><![CDATA[**/cs-*.jar]]></value> -->
					</set>
				</property>

				<!-- Use Java regular expression to find all domain classes -->
				<property name="regexPatterns">
					<set>
						<value><![CDATA[^edu/utah/further/fqe/model/impl/.*]]></value>
						<value><![CDATA[^edu/utah/further/ds/data/.*]]></value>
						<value><![CDATA[^edu/utah/further/fqe/impl/.*]]></value>
					</set>
				</property>

				<!-- Look for one of several class-level annotations -->
				<property name="resourceMatcher">
					<bean class="edu.utah.further.core.util.io.AnnotatedClassResourceMatcher">
						<constructor-arg index="0">
							<set>
								<value><![CDATA[javax.persistence.Entity]]></value>
								<value><![CDATA[javax.persistence.Embeddable]]></value>
								<value><![CDATA[javax.persistence.MappedSuperclass]]></value>
							</set>
						</constructor-arg>
					</bean>
				</property>

			</bean>
		</property>
	</bean>

	<bean id="inMemoryDao" class="edu.utah.further.core.data.service.DaoHibernateImpl">
		<constructor-arg index="0" ref="sessionFactory" />
	</bean>

	<!-- Jdbc Template for easy JDBC access -->
	<bean id="virtualRepoJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg ref="dataSource" />
	</bean>

	<alias name="inMemoryDao" alias="linkDao" />

	<!-- =========================================== -->
	<!-- Transaction management -->
	<!-- =========================================== -->

	<!-- Enable the configuration of transactional behavior based on annotations 
		According to Spring documentation, this only looks for @Transactional on 
		beans in the same application context it is defined in Omit transaction-manager 
		attribute due to PlatformTransactionManager being named the default expected 
		name 'transactionManager' Using aspectj instead of proxies as it slightly 
		performs better than Spring AOP -->
	<tx:annotation-driven mode="aspectj" />

	<!-- a PlatformTransactionManager is still required -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- Transaction template for more fine control transactions -->
	<bean id="translatorTransactionTemplate"
		class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="transactionManager" />
	</bean>
	
	<alias name="translatorTransactionTemplate" alias="inMemoryTransactionTemplate" />

</beans>